swagger: '2.0'

info:
  version: "%version%"
  title: PingPongfy API
  description: |
    Describes restful endpoints for the pingpongfy api.
    ## Structure

    ### The Response
    Each successful response (`2xx` status code) follows same generic schema:
    ```json
    {
        "data": {
            ...
        }
    }
    ```

    On the other hand either client or server errors (`4xx-5xx`) follow this
    schema:
    ```json
    {
        "errors": [{
            ...
        }]
    }
    ```

    #### DATA
    The `data` key contains the information client requested.

    #### ERRORS
    The `errors` key contains `array` of request errors. For example:
    ```json
    {
        "errors": [
          {
            "code": "VALIDATION_ERROR",
            "message": "e-mail must be valid."
          },
          {
            "code": "VALIDATION_ERROR",
            "message": "username already registered."
          }
        ]
    }
    ```

    #### PAGINATION
    Since the amount of objects returned is expected to be small,
      no pagination functionality is needed.

################################################################################
#                  Host, Base Path, Schemes and Content Types                  #
################################################################################
basePath: /v1
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json

################################################################################
#                                   Security                                   #
################################################################################
# All requests require to include a valid certificate generated by ApiGateway.
# Swagger 2.0 standard does provide a definition for such security type.

################################################################################
#                                   Paths                                      #
################################################################################
paths:
  /tables:
    get:
      description: Get list of tables
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Table'
    post:
      description: Creates a new table
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/CreateTable"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Table'
  /tables/{tableId}:
    patch:
      description: updates table status of certain table
      parameters:
        - name: tableId
          in: path
          type: number
          required: true
        - name: body
          in: body
          schema:
            $ref: "#/definitions/UpdateTable"
      responses:
        200:
          description: OK

################################################################################
#                                 Definitions                                  #
################################################################################
definitions:
  CreateTable:
    type: object
    required:
      - name
    properties:
      name:
        type: string
      description:
        type: string
  Table:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      isFree:
        type: boolean
      updatedAt:
        type: string
        description: iso8601 format
  UpdateTable:
    type: object
    required:
      - isFree
    properties:
      isFree:
        type: boolean
